/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.planty.api;

import de.planty.model.HumidityInforation;
import de.planty.model.Plant;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-12-10T17:19:34.216Z")

@Api(value = "plant", description = "the plant API")
public interface PlantApi {

    @ApiOperation(value = "Add a new plant to the system", nickname = "addPlant", notes = "", tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/plant",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addPlant(@ApiParam(value = "Plant object that needs to be added to the system" ,required=true )  @Valid @RequestBody Plant body);


    @ApiOperation(value = "Finds Plants by status", nickname = "findPlantsByStatus", notes = "Multiple status values can be provided with comma separated strings", response = Plant.class, responseContainer = "List", tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Plant.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/plant/findByName",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Plant>> findPlantsByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true) @Valid @RequestParam(value = "name", required = true) String name);


    @ApiOperation(value = "Find plant by ID", nickname = "getPlant", notes = "Returns a single plant", response = Plant.class, tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Plant.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Plant not found") })
    @RequestMapping(value = "/plant/{plantId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Plant> getPlant(@ApiParam(value = "ID of plant to return",required=true) @PathVariable("plantId") Long plantId);


    @ApiOperation(value = "Find plant by ID", nickname = "getPlantHumidy", notes = "Returns a single plant", response = HumidityInforation.class, tags={ "humidity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HumidityInforation.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Plant not found") })
    @RequestMapping(value = "/plant/{plantId}/humidity",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<HumidityInforation> getPlantHumidy(@ApiParam(value = "ID of plant to return",required=true) @PathVariable("plantId") Long plantId);


    @ApiOperation(value = "Update an existing plant", nickname = "updatePlant", notes = "", tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Plant not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/plant",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatePlant(@ApiParam(value = "Plant object that needs to be added to the system" ,required=true )  @Valid @RequestBody Plant body);


    @ApiOperation(value = "Updates a plant in the system with form data", nickname = "updatePlantWithForm", notes = "", tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/plant/{plantId}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updatePlantWithForm(@ApiParam(value = "ID of plant that needs to be updated",required=true) @PathVariable("plantId") Long plantId,@ApiParam(value = "Updated name of the plant") @RequestPart(value="name", required=false)  String name,@ApiParam(value = "Updated status of the plant") @RequestPart(value="status", required=false)  String status);


    @ApiOperation(value = "Find plant by ID", nickname = "waterPlant", notes = "Returns a single plant", tags={ "humidity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Plant not found") })
    @RequestMapping(value = "/plant/{plantId}/water",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> waterPlant(@ApiParam(value = "ID of plant to return",required=true) @PathVariable("plantId") Long plantId);

}
